import os
from telegram import Update, LabeledPrice
from telegram.ext import ContextTypes
from bot.constants import STATE_MENU
from bot.keyboards.main_menu import get_main_menu_keyboard
from bot.keyboards.donations_keyboards import get_cancel_keyboard
from bot.services import donations_service
from bot.services.core_service import is_speaker
from bot.utils.telegram_utils import send_message_with_retry

PAYMENT_TITLE = "–î–æ–Ω–∞—Ç –Ω–∞ PythonMeetup"
PAYMENT_DESC = "–ü–æ–¥–¥–µ—Ä–∂–∏ –º–∏—Ç–∞–ø ‚Äî –ª—é–±–∞—è —Å—É–º–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤—É!"
CURRENCY = "RUB"

async def donate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_message_with_retry(
        update.message,
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ (–≤ —Ä—É–±–ª—è—Ö, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=get_cancel_keyboard(),
    )
    return "DONATE_WAIT_AMOUNT"

async def donate_wait_amount_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if update.message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        is_spk = await is_speaker(user_id)
        await send_message_with_retry(
            update.message,
            "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
        )
        return STATE_MENU
    try:
        amount = int(update.message.text.strip())
        data = {
            'telegram_id': user_id,
            'amount': amount,
        }
        donations_service.save_donation(data)
    except Exception:
        await send_message_with_retry(
            update.message,
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 500):",
            reply_markup=get_cancel_keyboard(),
        )
        return "DONATE_WAIT_AMOUNT"
    context.user_data["donate_amount"] = amount
    provider_token = os.environ.get("PAYMENTS_PROVIDER_TOKEN")
    is_spk = await is_speaker(user_id)
    if not provider_token:
        await send_message_with_retry(
            update.message,
            "–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
        )
        return STATE_MENU
    prices = [LabeledPrice(label="–î–æ–Ω–∞—Ç –Ω–∞ –º–∏—Ç–∞–ø", amount=amount * 100)]
    await update.message.reply_invoice(
        title=PAYMENT_TITLE,
        description=PAYMENT_DESC,
        payload="meetup-donation",
        provider_token=provider_token,
        currency=CURRENCY,
        prices=prices,
        start_parameter="donate"
    )
    return "DONATE_WAIT_PAYMENT"

async def donate_cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_spk = await is_speaker(user_id)
    await send_message_with_retry(
        update.message,
        "–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
    )
    return STATE_MENU

async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    amount = update.message.successful_payment.total_amount // 100
    is_spk = await is_speaker(user_id)
    await send_message_with_retry(
        update.message,
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç! –¢—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª –º–∏—Ç–∞–ø –Ω–∞ {amount} ‚ÇΩ üôè",
        reply_markup=get_main_menu_keyboard(is_speaker=is_spk),
    )
    return STATE_MENU
